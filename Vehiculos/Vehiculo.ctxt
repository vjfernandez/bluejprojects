#BlueJ class context
comment0.params=matricula\ descripcion\ anno\ precio
comment0.target=Vehiculo(java.lang.String,\ java.lang.String,\ int,\ double)
comment0.text=\r\n\ Constructor\ para\ la\ clase\ que\ inicializa\ las\ propiedades\r\n
comment1.params=
comment1.target=Vehiculo()
comment1.text=\r\n\ Constructor\ sin\ par\u00E1metros.\ Si\ hubiera\ alguna\ operaci\u00F3n\ de\ inicializaci\u00F3n\ independiente\r\n\ de\ los\ par\u00E1metros\ la\ pondr\u00EDamos\ aqu\u00ED.\ \r\n
comment10.params=
comment10.target=java.lang.String\ getTipoVehiculo()
comment10.text=\ \r\n\ \u00C9ste\ m\u00E9todo\ lo\ voy\ a\ utilizar\ ayudar\ al\ m\u00E9todo\ imprimir()\ de\ tal\ manera\ que\ \ \r\n\ que\ cada\ clase\ devuelva\ la\ cadena\ "MOTO"\ "QUAD",\ o\ "TURISMO"\ del\ m\u00E9todo\ imprimir()\r\n\ Como\ estamos\ en\ la\ clase\ Veh\u00EDculo...\ y\ nunca\ va\ a\ haber\ instancias,\ no\ necesito\ programar\r\n\ nada\ aqu\u00ED...\ as\u00ED\ que\ declarar\u00E9\ el\ m\u00E9todo\ abstracto.\r\n\ Lo\ he\ puesto\ protegido\ porque\:\r\n\ <ol>\r\n\ <li>\ No\ quiero\ que\ se\ utilice\ desde\ el\ exterior\ </li>\r\n\ <li>S\u00ED\ quiero\ que\ se\ herede\ y\ que\ se\ haga\ overriding</li>\r\n\ </ol>\r\n\ \r\n\ @return\ En\ las\ clases\ derivadas\ devolver\u00E1\ la\ cadena\ "MOTO",\ "QUAD"\ o\ "TURISMO",\r\n\ seg\u00FAn\ proceda\r\n
comment11.params=
comment11.target=java.lang.String\ imprimir()
comment11.text=\r\n\ Un\ m\u00E9todo\ que\ devuelve\ una\ cadena\ con\ informaci\u00F3n\ acerca\ del\ veh\u00EDculo,\ tal\ y\ como\ se\ describe\ en\ el\r\n\ enunciado\ del\ ejercicio\r\n\ Como\ \u00E9sta\ clase\ es\ abstracta,\ no\ se\ va\ a\ utilizar\ nunca\ \u00E9ste\ m\u00E9todo\ -porque\ es\ de\ instancia,\ y\ la\ \r\n\ clase\ veh\u00EDculo\ no\ va\ a\ tener\ instancias...\ pero\ me\ va\ a\ servir\ de\ base\ para\ hacer\ una\ cadena\ de\ m\u00E9todos\ con\r\n\ overriding\ en\ el\ que\ cada\ uno\ aprovecha\ el\ heredado\ de\ la\ clase\ anterior.\r\n
comment2.params=
comment2.target=java.lang.String\ getMatricula()
comment2.text=\r\n\ Devuelve\ la\ matr\u00EDcula\ de\ un\ veh\u00EDculo\r\n\ @return\ la\ matr\u00EDcula\ almacenada\ como\ propiedad\ del\ veh\u00EDculo\r\n
comment3.params=matricula
comment3.target=void\ setMatricula(java.lang.String)
comment3.text=\r\n\ Establece\ la\ matr\u00EDcula\ de\ un\ veh\u00EDculo\r\n\ @param\ matricula\ la\ nueva\ matr\u00EDcula\r\n
comment4.params=
comment4.target=java.lang.String\ getDescripcion()
comment4.text=\r\n\ Devuelve\ la\ descripci\u00F3n\ de\ un\ veh\u00EDculo.\ Probablemente\ tambi\u00E9n\ se\ utilice\ esta\r\n\ propiedad\ para\ almacenar\ cosas\ como\ la\ marca\ y\ modelo\ de\ un\ veh\u00EDculo\r\n\ @return\ la\ descripci\u00F3n\ almacenada\ como\ propiedad\ del\ veh\u00EDculo\r\n
comment5.params=descripcion
comment5.target=void\ setDescripcion(java.lang.String)
comment5.text=\r\n\ Establece\ la\ descripci\u00F3n\ de\ un\ veh\u00EDculo.\ Probablemente\ tambi\u00E9n\ se\ utilice\ esta\r\n\ propiedad\ para\ almacenar\ cosas\ como\ la\ marca\ y\ modelo\ de\ un\ veh\u00EDculo\r\n\ @param\ descripcion\ la\ nueva\ descripci\u00F3n\ del\ veh\u00EDculo\r\n
comment6.params=
comment6.target=int\ getAnno()
comment6.text=\r\n\ Devuelve\ el\ a\u00F1o\ de\ fabricaci\u00F3n\ de\ un\ veh\u00EDculo\r\n\ @return\ el\ a\u00F1o\ de\ fabricaci\u00F3n\ \r\n
comment7.params=anno
comment7.target=void\ setAnno(int)
comment7.text=\r\n\ Establece\ el\ an\u00F1o\ de\ fabricaci\u00F3n\ de\ un\ veh\u00EDculo.\r\n\ @param\ anno\ Un\ a\u00F1o,\ que\ ser\u00E1\ el\ que\ se\ almacene\ en\ el\ veh\u00EDculo\r\n
comment8.params=
comment8.target=double\ getPrecio()
comment8.text=\r\n\ Devuelve\ el\ precio\ de\ un\ veh\u00EDculo\ en\ el\ contexto\ de\ nuestro\ ejemplo\r\n\ @return\ el\ precio\ almacenado\ como\ propiedad\ del\ veh\u00EDculo\r\n
comment9.params=precio
comment9.target=void\ setPrecio(double)
comment9.text=\r\n\ Establece\ el\ precio\ de\ un\ veh\u00EDculo.\r\n\ @param\ precio\ Un\ precio,\ expresado\ en\ unidades\ monetarias,\r\n\ que\ ser\u00E1\ el\ que\ se\ almacene\ en\ el\ veh\u00EDculo\r\n
numComments=12
